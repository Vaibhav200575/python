# -*- coding: utf-8 -*-
"""Base Python Programming Exercise (1).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UvTMcjAXibfKXi5XEmAbvgthITIsAKWp

## Python Basic Programming Exercises

Q1: What is the output of following expression
    5 + 4 * 9 % (3 + 1) / 6 - 1
"""

print(5 + 4 * 9 % (3 + 1) / 6 - 1)

"""Q2: Write a program to check if a Number is Odd or Even. Take number as a input

*   List item
*   List item

from user at runtime.
"""

n=int(input("enter the no"))
if(n%2==0):
  print("given number is even number")
else:
  print("given number is odd number")

"""Q3: Write a program to display the multiplication table by taking a number as

---

input.
    [Hint : Use print statement inside of a loop]
"""

n=int(input("enter the number"))
for i in range(1,11):
  print(i*n)

"""Q4: Write a program which will find all numbers between 2000 and 3200 which are divisible by 7
    but are not a multiple of 5.

Note: The numbers obtained should be printed in a comma-separated sequence on a single line.
"""

a=[]
for i in range(2000,3200):
   if(i%7==0 and i%5!=0):
         a.append(i)
print(a)

"""Q5: Count the elements of each datatype inside the list and display in output

---



---


    [2, 3, 'Py', '10', 1, 'SQL', 5.5, True, 3, 'John', None, 7]
"""

from types import NoneType
a=[2, 3, 'Py', '10', 1, 'SQL', 5.5, True, 3, 'John', None, 7]
c=len(a)
n=0
m=0
s=0
k=0
l=0
for i in range(0,12):
        d=type(a[i])
        if(d==int):
           n+=1
        elif(d==float):
           m+=1
        elif(d==bool):
          s+=1
        elif(d==str):
          k+=1
        elif(d==NoneType):
          l+=1
print("number of str data type elements is:",k)
print("number of int data type elements is:",n)
print("number of bool data type elements is:",s)
print("number of float data type elements is:",m)
print("number of NoneType data type elements is:",l)

"""Q6: Add all values from the list with numeric datatypes

---


    [2, 3, 'Py', '10', 1, 'SQL', 5.5, True, 3, 'John', None, 7]
"""

data = [2, 3, 'Py', '10', 1, 'SQL', 5.5, True, 3, 'John', None, 7]


numeric_sum = sum(item for item in data if isinstance(item, (int, float)) and not isinstance(item, bool))

print("Sum of numeric values:", numeric_sum)

"""Q7: Concat all str datatypes with hyphen as a delimiter
    [2, 3, 'Py', '10', 1, 'SQL', 5.5, True, 3, 'John', None, 7]
"""

data = [2, 3, 'Py', '10', 1, 'SQL', 5.5, True, 3, 'John', None, 7]


string_concat = '-'.join(item for item in data if isinstance(item, str))

print("Concatenated string:", string_concat)

""" Q8:Get only odd numbers from the following list and store the numbers in new list li = [5, 7, 22, 97, 54, 62, 77, 23, 73, 61]"""

li = [5, 7, 22, 97, 54, 62, 77, 23, 73, 61]
c=len(li)
a=[]
for i in range(0,c):
     if(li[i]%2!=0):
       a.append(li[i])
print(a)

"""Q9: Write an udf to calculate the area of different shapes

Take shape and dimensions as arguments to udf as follows :

1. square which has side
2. rectangle which has length and width
3. circle which has radius

The shape should be a positional argument and it's dimensions are taken as kwargs

Perform proper validation for the user inputs and then calculate area.

E.g. if shape is square, ensure kwargs has "side" and if so, then you may return the area, else display appropriate error message like "Please enter 'side' for a square"
"""

def calculate_area(shape, **kwargs):
    if shape == 'square':
        side = kwargs.get('side')
        if side is None or not isinstance(side, (int, float)) or side <= 0:
            return "Invalid side length for square."
        return side ** 2

    elif shape == 'rectangle':
        length = kwargs.get('length')
        width = kwargs.get('width')
        if (length is None or not isinstance(length, (int, float)) or length <= 0 or
            width is None or not isinstance(width, (int, float)) or width <= 0):
            return "Invalid dimensions for rectangle."
        return length * width

    elif shape == 'circle':
        radius = kwargs.get('radius')
        if radius is None or not isinstance(radius, (int, float)) or radius <= 0:
            return "Invalid radius for circle."
        return 3.14159 * (radius ** 2)

    else:
        return "Invalid shape."

print(calculate_area('square', side=5))
print(calculate_area('rectangle', length=4, width=6))
print(calculate_area('circle', radius=3))
print(calculate_area('triangle', base=5, height=10))
print(calculate_area('square', side=-2))

"""Q10: write a UDF to check if a number is prime or not.

---



---


"""

def is_prime(number):

    if not isinstance(number, int) or number <= 1:
        return False


    for i in range(2, int(number ** 0.5) + 1):
        if number % i == 0:
            return False
            return True


num = int(input("Enter a number: "))
if is_prime(num):
    print(f"{num} is a prime number.")
else:
    print(f"{num} is not a prime number.")

"""Q11. Write a program that takes a string and returns reversed string. i.e. if input is "abcd123" output should be "321dcba"
"""

n=input("enter the string")
print(n[::-1])